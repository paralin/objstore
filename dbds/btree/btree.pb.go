// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/aperturerobotics/objstore/dbds/btree/btree.proto

package btree

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import storageref "github.com/aperturerobotics/storageref"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Root is the root of the tree.
type Root struct {
	// RootNodeRef is the reference to the root node.
	RootNodeRef *storageref.StorageRef `protobuf:"bytes,1,opt,name=root_node_ref,json=rootNodeRef" json:"root_node_ref,omitempty"`
	// Length is the number of items in the tree.
	Length               uint32   `protobuf:"varint,2,opt,name=length" json:"length,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Root) Reset()         { *m = Root{} }
func (m *Root) String() string { return proto.CompactTextString(m) }
func (*Root) ProtoMessage()    {}
func (*Root) Descriptor() ([]byte, []int) {
	return fileDescriptor_btree_3e0cc741e64a762b, []int{0}
}
func (m *Root) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Root.Unmarshal(m, b)
}
func (m *Root) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Root.Marshal(b, m, deterministic)
}
func (dst *Root) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Root.Merge(dst, src)
}
func (m *Root) XXX_Size() int {
	return xxx_messageInfo_Root.Size(m)
}
func (m *Root) XXX_DiscardUnknown() {
	xxx_messageInfo_Root.DiscardUnknown(m)
}

var xxx_messageInfo_Root proto.InternalMessageInfo

func (m *Root) GetRootNodeRef() *storageref.StorageRef {
	if m != nil {
		return m.RootNodeRef
	}
	return nil
}

func (m *Root) GetLength() uint32 {
	if m != nil {
		return m.Length
	}
	return 0
}

// Item represents a single object in the tree.
type Item struct {
	// Key is the item's key.
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	// Ref contains the storage reference.
	Ref                  *storageref.StorageRef `protobuf:"bytes,2,opt,name=ref" json:"ref,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *Item) Reset()         { *m = Item{} }
func (m *Item) String() string { return proto.CompactTextString(m) }
func (*Item) ProtoMessage()    {}
func (*Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_btree_3e0cc741e64a762b, []int{1}
}
func (m *Item) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Item.Unmarshal(m, b)
}
func (m *Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Item.Marshal(b, m, deterministic)
}
func (dst *Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Item.Merge(dst, src)
}
func (m *Item) XXX_Size() int {
	return xxx_messageInfo_Item.Size(m)
}
func (m *Item) XXX_DiscardUnknown() {
	xxx_messageInfo_Item.DiscardUnknown(m)
}

var xxx_messageInfo_Item proto.InternalMessageInfo

func (m *Item) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Item) GetRef() *storageref.StorageRef {
	if m != nil {
		return m.Ref
	}
	return nil
}

// Node is a node in the tree.
type Node struct {
	Leaf                 bool                     `protobuf:"varint,1,opt,name=leaf" json:"leaf,omitempty"`
	N                    int32                    `protobuf:"varint,2,opt,name=n" json:"n,omitempty"`
	Items                []*Item                  `protobuf:"bytes,3,rep,name=items" json:"items,omitempty"`
	ChildrenRefs         []*storageref.StorageRef `protobuf:"bytes,4,rep,name=children_refs,json=childrenRefs" json:"children_refs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *Node) Reset()         { *m = Node{} }
func (m *Node) String() string { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()    {}
func (*Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_btree_3e0cc741e64a762b, []int{2}
}
func (m *Node) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Node.Unmarshal(m, b)
}
func (m *Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Node.Marshal(b, m, deterministic)
}
func (dst *Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node.Merge(dst, src)
}
func (m *Node) XXX_Size() int {
	return xxx_messageInfo_Node.Size(m)
}
func (m *Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Node proto.InternalMessageInfo

func (m *Node) GetLeaf() bool {
	if m != nil {
		return m.Leaf
	}
	return false
}

func (m *Node) GetN() int32 {
	if m != nil {
		return m.N
	}
	return 0
}

func (m *Node) GetItems() []*Item {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *Node) GetChildrenRefs() []*storageref.StorageRef {
	if m != nil {
		return m.ChildrenRefs
	}
	return nil
}

func init() {
	proto.RegisterType((*Root)(nil), "btree.Root")
	proto.RegisterType((*Item)(nil), "btree.Item")
	proto.RegisterType((*Node)(nil), "btree.Node")
}

func init() {
	proto.RegisterFile("github.com/aperturerobotics/objstore/dbds/btree/btree.proto", fileDescriptor_btree_3e0cc741e64a762b)
}

var fileDescriptor_btree_3e0cc741e64a762b = []byte{
	// 274 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x50, 0x3d, 0x4f, 0xc3, 0x30,
	0x10, 0x95, 0x9b, 0xa4, 0x82, 0x4b, 0x23, 0x21, 0x0f, 0x55, 0xc4, 0x14, 0x32, 0x65, 0x4a, 0xa4,
	0x32, 0x20, 0xd1, 0x8d, 0x8d, 0x85, 0xc1, 0x6c, 0x2c, 0x55, 0x9c, 0x5c, 0x3e, 0x20, 0xc9, 0x55,
	0xb6, 0x3b, 0xf0, 0x0f, 0xf8, 0xd9, 0xc8, 0x36, 0x48, 0x5d, 0xda, 0xc5, 0x7a, 0x4f, 0x7e, 0xf7,
	0xde, 0xbb, 0x83, 0x7d, 0x3f, 0x9a, 0xe1, 0x24, 0xcb, 0x86, 0xe6, 0xaa, 0x3e, 0xa2, 0x32, 0x27,
	0x85, 0x8a, 0x24, 0x99, 0xb1, 0xd1, 0x15, 0xc9, 0x4f, 0x6d, 0x48, 0x61, 0xd5, 0xca, 0x56, 0x57,
	0xd2, 0x28, 0x44, 0xff, 0x96, 0x47, 0x45, 0x86, 0x78, 0xe4, 0xc8, 0xfd, 0xd3, 0x35, 0x0f, 0x6b,
	0x50, 0xf7, 0xa8, 0xb0, 0x3b, 0x83, 0x7e, 0x3e, 0xff, 0x80, 0x50, 0x10, 0x19, 0xfe, 0x0c, 0x89,
	0x22, 0x32, 0x87, 0x85, 0x5a, 0x3c, 0x28, 0xec, 0x52, 0x96, 0xb1, 0x22, 0xde, 0x6d, 0xcb, 0xb3,
	0x89, 0x77, 0x0f, 0x05, 0x76, 0x22, 0xb6, 0xe2, 0x37, 0x6a, 0x2d, 0xe1, 0x5b, 0x58, 0x4f, 0xb8,
	0xf4, 0x66, 0x48, 0x57, 0x19, 0x2b, 0x12, 0xf1, 0xc7, 0xf2, 0x17, 0x08, 0x5f, 0x0d, 0xce, 0xfc,
	0x0e, 0x82, 0x2f, 0xfc, 0x76, 0x8e, 0xb7, 0xc2, 0x42, 0x5e, 0x40, 0x60, 0x33, 0x56, 0x57, 0x33,
	0xac, 0x24, 0xff, 0x61, 0x10, 0xda, 0x1c, 0xce, 0x21, 0x9c, 0xb0, 0xf6, 0xbd, 0x6e, 0x84, 0xc3,
	0x7c, 0x03, 0x6c, 0x71, 0x26, 0x91, 0x60, 0x0b, 0x7f, 0x80, 0x68, 0x34, 0x38, 0xeb, 0x34, 0xc8,
	0x82, 0x22, 0xde, 0xc5, 0xa5, 0xbf, 0x93, 0xad, 0x20, 0xfc, 0x0f, 0xdf, 0x43, 0xd2, 0x0c, 0xe3,
	0xd4, 0x2a, 0x5c, 0xec, 0x92, 0x3a, 0x0d, 0x9d, 0xf4, 0x52, 0x83, 0xcd, 0xbf, 0x58, 0x60, 0xa7,
	0xe5, 0xda, 0x5d, 0xec, 0xf1, 0x37, 0x00, 0x00, 0xff, 0xff, 0x78, 0x6e, 0x6a, 0xf2, 0xb0, 0x01,
	0x00, 0x00,
}
